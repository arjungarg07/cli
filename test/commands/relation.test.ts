import {expect, test} from '@oclif/test';

const flightUpdateSubData = new Map(Object.entries({'Flight Monitor Service': {description: 'Provides updates from a subscribed flight\n',subscribe: {summary: 'Inform about the status of a subscribed flight',message: {summary: 'Provides flight status on arrival and destination',payload: {type: 'object',properties: {user: {type: 'object',properties: {userName: {type: 'string',minimum: 1,description: 'user name',example: 'John Smith','x-parser-schema-id': '<anonymous-schema-3>'},phoneNumber: {type: 'string',minimum: 5,description: 'phone number where notifications will be received.',example: '+13451235','x-parser-schema-id': '<anonymous-schema-4>'}},'x-parser-schema-id': '<anonymous-schema-2>'},departure: {type: 'object',properties: {iataCode: {type: 'string',description: '2 to 3-character IATA carrier code',example: 'MAD','x-parser-schema-id': '<anonymous-schema-6>'},scheduledDate: {type: 'string',format: 'date-time',description: 'scheduled datetime of the flight, local to the airport.',example: '2020-10-20 19:15','x-parser-schema-id': '<anonymous-schema-7>'},gate: {type: 'string',description: 'departure gate',example: '2D','x-parser-schema-id': '<anonymous-schema-8>'},terminal: {type: 'string',description: 'airport terminal',example: '4','x-parser-schema-id': '<anonymous-schema-9>'}},'x-parser-schema-id': '<anonymous-schema-5>'},arrival: {type: 'object',properties: {iataCode: {type: 'string',description: '2 to 3-character IATA carrier code',example: 'MAD','x-parser-schema-id': '<anonymous-schema-11>'},scheduledDate: {type: 'string',format: 'date-time',description: 'scheduled datetime of the flight, local to the airport.',example: '2020-10-20 19:15','x-parser-schema-id': '<anonymous-schema-12>'},gate: {type: 'string',description: 'departure gate',example: '2D','x-parser-schema-id': '<anonymous-schema-13>'},terminal: {type: 'string',description: 'airport terminal',example: '4','x-parser-schema-id': '<anonymous-schema-14>'}},'x-parser-schema-id': '<anonymous-schema-10>'}},'x-parser-schema-id': '<anonymous-schema-1>'},'x-parser-original-schema-format': 'application/vnd.aai.asyncapi;version=2.0.0','x-parser-original-payload': {type: 'object',properties: {user: {type: 'object',properties: {userName: {type: 'string',minimum: 1,description: 'user name',example: 'John Smith'},phoneNumber: {type: 'string',minimum: 5,description: 'phone number where notifications will be received.',example: '+13451235'}}},departure: {type: 'object',properties: {iataCode: {type: 'string',description: '2 to 3-character IATA carrier code',example: 'MAD'},scheduledDate: {type: 'string',format: 'date-time',description: 'scheduled datetime of the flight, local to the airport.',example: '2020-10-20 19:15'},gate: {type: 'string',description: 'departure gate',example: '2D'},terminal: {type: 'string',description: 'airport terminal',example: '4'}}},arrival: {type: 'object',properties: {iataCode: {type: 'string',description: '2 to 3-character IATA carrier code',example: 'MAD'},scheduledDate: {type: 'string',format: 'date-time',description: 'scheduled datetime of the flight, local to the airport.',example: '2020-10-20 19:15'},gate: {type: 'string',description: 'departure gate',example: '2D'},terminal: {type: 'string',description: 'airport terminal',example: '4'}}}}},schemaFormat: 'application/vnd.aai.asyncapi;version=2.0.0','x-parser-message-parsed': true,'x-parser-message-name': 'flightStatus'}}}}));
const flightUpdatePubData = new Map(Object.entries({'Flight Notifier Service': {description: 'Receives updates from a subscribed flight\n',publish: {summary: 'Inform about the status of a subscribed flight',message: {summary: 'Provides flight status on arrival and destination',payload: {type: 'object',properties: {user: {type: 'object',properties: {userName: {type: 'string',minimum: 1,description: 'user name',example: 'John Smith','x-parser-schema-id': '<anonymous-schema-3>'},phoneNumber: {type: 'string',minimum: 5,description: 'phone number where notifications will be received.',example: '+13451235','x-parser-schema-id': '<anonymous-schema-4>'}},'x-parser-schema-id': '<anonymous-schema-2>'},departure: {type: 'object',properties: {iataCode: {type: 'string',description: '2 to 3-character IATA carrier code',example: 'MAD','x-parser-schema-id': '<anonymous-schema-6>'},scheduledDate: {type: 'string',format: 'date-time',description: 'scheduled datetime of the flight, local to the airport.',example: '2020-10-20 19:15','x-parser-schema-id': '<anonymous-schema-7>'},gate: {type: 'string',description: 'departure gate',example: '2D','x-parser-schema-id': '<anonymous-schema-8>'},terminal: {type: 'string',description: 'airport terminal',example: '4','x-parser-schema-id': '<anonymous-schema-9>'}},'x-parser-schema-id': '<anonymous-schema-5>'},arrival: {type: 'object',properties: {iataCode: {type: 'string',description: '2 to 3-character IATA carrier code',example: 'MAD','x-parser-schema-id': '<anonymous-schema-11>'},scheduledDate: {type: 'string',format: 'date-time',description: 'scheduled datetime of the flight, local to the airport.',example: '2020-10-20 19:15','x-parser-schema-id': '<anonymous-schema-12>'},gate: {type: 'string',description: 'departure gate',example: '2D','x-parser-schema-id': '<anonymous-schema-13>'},terminal: {type: 'string',description: 'airport terminal',example: '4','x-parser-schema-id': '<anonymous-schema-14>'}},'x-parser-schema-id': '<anonymous-schema-10>'}},'x-parser-schema-id': '<anonymous-schema-1>'},'x-parser-original-schema-format': 'application/vnd.aai.asyncapi;version=2.0.0','x-parser-original-payload': {type: 'object',properties: {user: {type: 'object',properties: {userName: {type: 'string',minimum: 1,description: 'user name',example: 'John Smith'},phoneNumber: {type: 'string',minimum: 5,description: 'phone number where notifications will be received.',example: '+13451235'}}},departure: {type: 'object',properties: {iataCode: {type: 'string',description: '2 to 3-character IATA carrier code',example: 'MAD'},scheduledDate: {type: 'string',format: 'date-time',description: 'scheduled datetime of the flight, local to the airport.',example: '2020-10-20 19:15'},gate: {type: 'string',description: 'departure gate',example: '2D'},terminal: {type: 'string',description: 'airport terminal',example: '4'}}},arrival: {type: 'object',properties: {iataCode: {type: 'string',description: '2 to 3-character IATA carrier code',example: 'MAD'},scheduledDate: {type: 'string',format: 'date-time',description: 'scheduled datetime of the flight, local to the airport.',example: '2020-10-20 19:15'},gate: {type: 'string',description: 'departure gate',example: '2D'},terminal: {type: 'string',description: 'airport terminal',example: '4'}}}}},schemaFormat: 'application/vnd.aai.asyncapi;version=2.0.0','x-parser-message-parsed': true,'x-parser-message-name': 'flightStatus'}}}}));
const flightQueueSubData = new Map(Object.entries({'Flight Subscriber Service': {description: 'queue flight in order to retrieve status\n',subscribe: {summary: 'Receive information about the flight that should be monitored for changes',message: {summary: 'Requets to queue a flight to be monitored',payload: {type: 'object',properties: {flight: {type: 'object',properties: {carrierCode: {type: 'string',description: '2 to 3-character IATA carrier code',example: 'LH','x-parser-schema-id': '<anonymous-schema-3>'},flightNumber: {type: 'integer',minimum: 1,description: '1 to 4-digit number of the flight',example: '193','x-parser-schema-id': '<anonymous-schema-4>'},scheduledDepartureDate: {type: 'string',format: 'date-time',description: 'scheduled departure date of the flight, local to the departure airport.',example: '2020-10-20','x-parser-schema-id': '<anonymous-schema-5>'}},'x-parser-schema-id': '<anonymous-schema-2>'},user: {type: 'object',properties: {userName: {type: 'string',minimum: 1,description: 'user name',example: 'John Smith','x-parser-schema-id': '<anonymous-schema-7>'},phoneNumber: {type: 'string',minimum: 5,description: 'phone number where notifications will be received.',example: '+13451235','x-parser-schema-id': '<anonymous-schema-8>'}},'x-parser-schema-id': '<anonymous-schema-6>'}},'x-parser-schema-id': '<anonymous-schema-1>'},'x-parser-original-schema-format': 'application/vnd.aai.asyncapi;version=2.0.0','x-parser-original-payload': {type: 'object',properties: {flight: {type: 'object',properties: {carrierCode: {type: 'string',description: '2 to 3-character IATA carrier code',example: 'LH'},flightNumber: {type: 'integer',minimum: 1,description: '1 to 4-digit number of the flight',example: '193'},scheduledDepartureDate: {type: 'string',format: 'date-time',description: 'scheduled departure date of the flight, local to the departure airport.',example: '2020-10-20'}}},user: {type: 'object',properties: {userName: {type: 'string',minimum: 1,description: 'user name',example: 'John Smith'},phoneNumber: {type: 'string',minimum: 5,description: 'phone number where notifications will be received.',example: '+13451235'}}}}},schemaFormat: 'application/vnd.aai.asyncapi;version=2.0.0','x-parser-message-parsed': true,'x-parser-message-name': 'flightQueue'}}}}));
const flightQueuePubData = new Map(Object.entries({'Flight Monitor Service': {description: 'Queues a flight in order to retrieve status\n',publish: {summary: 'Subscribe about the status of a given flight',message: {summary: 'Requets to queue a flight to be monitored',payload: {type: 'object',properties: {flight: {type: 'object',properties: {carrierCode: {type: 'string',description: '2 to 3-character IATA carrier code',example: 'LH','x-parser-schema-id': '<anonymous-schema-17>'},flightNumber: {type: 'integer',minimum: 1,description: '1 to 4-digit number of the flight',example: '193','x-parser-schema-id': '<anonymous-schema-18>'},scheduledDepartureDate: {type: 'string',format: 'date-time',description: 'scheduled departure date of the flight, local to the departure airport.',example: '2020-10-20','x-parser-schema-id': '<anonymous-schema-19>'}},'x-parser-schema-id': '<anonymous-schema-16>'},user: {type: 'object',properties: {userName: {type: 'string',minimum: 1,description: 'user name',example: 'John Smith','x-parser-schema-id': '<anonymous-schema-21>'},phoneNumber: {type: 'string',minimum: 5,description: 'phone number where notifications will be received.',example: '+13451235','x-parser-schema-id': '<anonymous-schema-22>'}},'x-parser-schema-id': '<anonymous-schema-20>'}},'x-parser-schema-id': '<anonymous-schema-15>'},'x-parser-original-schema-format': 'application/vnd.aai.asyncapi;version=2.0.0','x-parser-original-payload': {type: 'object',properties: {flight: {type: 'object',properties: {carrierCode: {type: 'string',description: '2 to 3-character IATA carrier code',example: 'LH'},flightNumber: {type: 'integer',minimum: 1,description: '1 to 4-digit number of the flight',example: '193'},scheduledDepartureDate: {type: 'string',format: 'date-time',description: 'scheduled departure date of the flight, local to the departure airport.',example: '2020-10-20'}}},user: {type: 'object',properties: {userName: {type: 'string',minimum: 1,description: 'user name',example: 'John Smith'},phoneNumber: {type: 'string',minimum: 5,description: 'phone number where notifications will be received.',example: '+13451235'}}}}},schemaFormat: 'application/vnd.aai.asyncapi;version=2.0.0','x-parser-message-parsed': true,'x-parser-message-name': 'flightQueue'}}}}));
const outputMermaid = 'graph TD\n server1[(mqtt://localhost:1883)]\nFlightSubscriberService[Flight Subscriber Service]\nFlightSubscriberService -- flight/queue --> server1\nFlightMonitorService[Flight Monitor Service]\nserver1 -- flight/queue --> FlightMonitorService\nFlightMonitorService -- flight/update --> server1\nFlightNotifierService[Flight Notifier Service]\nserver1 -- flight/update --> FlightNotifierService\n';
const outputPlantUML = '@startuml\ntitle Classes - Class Diagram\n\nclass server1 { \n url: mqtt://localhost:1883 \n protocol: mqtt\n}\nFlightMonitorService --|> server1:flight/update\nserver1 --|> FlightNotifierService:flight/update\nFlightSubscriberService --|> server1:flight/queue\nserver1 --|> FlightMonitorService:flight/queue\n@enduml\n';
const outputReactFlow = '[\n  {\n    id: \'Server1\',\n    data: { label: \'mqtt://localhost:1883,mqtt\' },\n    position: { x: 250, y: 5 }\n  },\n  {\n    id: \'FlightMonitorService\',\n    data: { label: \'Flight Monitor Service\' },\n    position: { x: 100, y: 10 }\n  },\n  {\n    id: \'edge1\',\n    source: \'FlightMonitorService\',\n    target: \'Server1\',\n    animated: true,\n    label: \'flight/update\',\n    type: \'edgeType\',\n    arrowHeadType: \'arrowclosed\'\n  },\n  {\n    id: \'FlightNotifierService\',\n    data: { label: \'Flight Notifier Service\' },\n    position: { x: 100, y: 10 }\n  },\n  {\n    id: \'edge2\',\n    source: \'Server1\',\n    target: \'FlightNotifierService\',\n    animated: true,\n    label: \'flight/update\',\n    type: \'edgeType\',\n    arrowHeadType: \'arrowclosed\'\n  },\n  {\n    id: \'FlightSubscriberService\',\n    data: { label: \'Flight Subscriber Service\' },\n    position: { x: 100, y: 10 }\n  },\n  {\n    id: \'edge3\',\n    source: \'FlightSubscriberService\',\n    target: \'Server1\',\n    animated: true,\n    label: \'flight/queue\',\n    type: \'edgeType\',\n    arrowHeadType: \'arrowclosed\'\n  },\n  {\n    id: \'edge4\',\n    source: \'Server1\',\n    target: \'FlightMonitorService\',\n    animated: true,\n    label: \'flight/queue\',\n    type: \'edgeType\',\n    arrowHeadType: \'arrowclosed\'\n  }\n]\n';

const defaultFilePaths = [
  './test/examples/flightService/monitor.yaml',
  './test/examples/flightService/notifier.yaml',
  './test/examples/flightService/subscriber.yaml',
];
describe('relation', () => {
  test
    .stderr()
    .stdout()
    .command([
      'relation',
      ...defaultFilePaths,
      '--type=mermaid'
    ])
    .it('works and logs correct output when mermaid syntax is provided', (ctx, done) => {
      expect(ctx.stdout).to.equal(outputMermaid);
      expect(ctx.stderr).to.equal('');
      done();
    });

  test
    .stderr()
    .stdout()
    .command([
      'relation',
      ...defaultFilePaths,
      '--type=plantUML'
    ])
    .it('works and logs correct output when plantUMl syntax is provided', (ctx, done) => {
      expect(ctx.stdout).to.equal(outputPlantUML);
      expect(ctx.stderr).to.equal('');
      done();
    });

  test
    .stderr()
    .stdout()
    .command([
      'relation',
      ...defaultFilePaths,
      '--type=reactFlow'
    ])
    .it('works and logs correct output when reactFlow syntax is provided', (ctx, done) => {
      expect(ctx.stdout).to.equal(outputReactFlow);
      expect(ctx.stderr).to.equal('');
      done();
    });

  test
    .stderr()
    .stdout()
    .command([
      'relation',
      './test/examples/flightService/monitor.yaml',
    ])
    .it('should not work on providing zero or one single contexts/filepaths', (ctx, done) => {
      expect(ctx.stdout).to.equal('');
      expect(ctx.stderr).to.equal('Error: Please provide more than one context/filepaths.\n');
      done();
    });
});
